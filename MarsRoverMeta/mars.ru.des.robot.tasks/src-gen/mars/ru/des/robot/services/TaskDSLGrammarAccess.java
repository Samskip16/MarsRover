/*
 * generated by Xtext 2.15.0
 */
package mars.ru.des.robot.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TaskDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DSLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mars.ru.des.robot.TaskDSL.DSL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMissionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMissionsMissionParserRuleCall_0_0 = (RuleCall)cMissionsAssignment_0.eContents().get(0);
		private final Assignment cTasksAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTasksTaskParserRuleCall_1_0 = (RuleCall)cTasksAssignment_1.eContents().get(0);
		
		//DSL:
		//	missions+=Mission*
		//	tasks+=Task*;
		@Override public ParserRule getRule() { return rule; }
		
		//missions+=Mission* tasks+=Task*
		public Group getGroup() { return cGroup; }
		
		//missions+=Mission*
		public Assignment getMissionsAssignment_0() { return cMissionsAssignment_0; }
		
		//Mission
		public RuleCall getMissionsMissionParserRuleCall_0_0() { return cMissionsMissionParserRuleCall_0_0; }
		
		//tasks+=Task*
		public Assignment getTasksAssignment_1() { return cTasksAssignment_1; }
		
		//Task
		public RuleCall getTasksTaskParserRuleCall_1_0() { return cTasksTaskParserRuleCall_1_0; }
	}
	public class MissionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mars.ru.des.robot.TaskDSL.Mission");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMissionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTasksKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTasksAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTasksTaskCrossReference_3_0 = (CrossReference)cTasksAssignment_3.eContents().get(0);
		private final RuleCall cTasksTaskIDTerminalRuleCall_3_0_1 = (RuleCall)cTasksTaskCrossReference_3_0.eContents().get(1);
		
		//Mission:
		//	'Mission:' name=ID
		//	"tasks:"
		//	tasks+=[Task]+;
		@Override public ParserRule getRule() { return rule; }
		
		//'Mission:' name=ID "tasks:" tasks+=[Task]+
		public Group getGroup() { return cGroup; }
		
		//'Mission:'
		public Keyword getMissionKeyword_0() { return cMissionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"tasks:"
		public Keyword getTasksKeyword_2() { return cTasksKeyword_2; }
		
		//tasks+=[Task]+
		public Assignment getTasksAssignment_3() { return cTasksAssignment_3; }
		
		//[Task]
		public CrossReference getTasksTaskCrossReference_3_0() { return cTasksTaskCrossReference_3_0; }
		
		//ID
		public RuleCall getTasksTaskIDTerminalRuleCall_3_0_1() { return cTasksTaskIDTerminalRuleCall_3_0_1; }
	}
	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mars.ru.des.robot.TaskDSL.Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cActionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionActionParserRuleCall_2_0 = (RuleCall)cActionAssignment_2.eContents().get(0);
		private final Assignment cDetectorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDetectorDetectorParserRuleCall_3_0 = (RuleCall)cDetectorAssignment_3.eContents().get(0);
		
		//Task:
		//	'Task:' name=ID
		//	action=Action
		//	detector=Detector?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Task:' name=ID action=Action detector=Detector?
		public Group getGroup() { return cGroup; }
		
		//'Task:'
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//action=Action
		public Assignment getActionAssignment_2() { return cActionAssignment_2; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_2_0() { return cActionActionParserRuleCall_2_0; }
		
		//detector=Detector?
		public Assignment getDetectorAssignment_3() { return cDetectorAssignment_3; }
		
		//Detector
		public RuleCall getDetectorDetectorParserRuleCall_3_0() { return cDetectorDetectorParserRuleCall_3_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mars.ru.des.robot.TaskDSL.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cActionKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cDriveUntilParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cInvestigateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSpeakParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFollowLineParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Action:
		//	'action:'
		//	DriveUntil | Investigate | Speak | FollowLine;
		@Override public ParserRule getRule() { return rule; }
		
		//'action:' DriveUntil | Investigate | Speak | FollowLine
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'action:' DriveUntil
		public Group getGroup_0() { return cGroup_0; }
		
		//'action:'
		public Keyword getActionKeyword_0_0() { return cActionKeyword_0_0; }
		
		//DriveUntil
		public RuleCall getDriveUntilParserRuleCall_0_1() { return cDriveUntilParserRuleCall_0_1; }
		
		//Investigate
		public RuleCall getInvestigateParserRuleCall_1() { return cInvestigateParserRuleCall_1; }
		
		//Speak
		public RuleCall getSpeakParserRuleCall_2() { return cSpeakParserRuleCall_2; }
		
		//FollowLine
		public RuleCall getFollowLineParserRuleCall_3() { return cFollowLineParserRuleCall_3; }
	}
	public class DetectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mars.ru.des.robot.TaskDSL.Detector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDetectorsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAvoidersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAvoidersAvoidParserRuleCall_1_0 = (RuleCall)cAvoidersAssignment_1.eContents().get(0);
		
		//Detector:
		//	'detectors:'
		//	avoiders+=Avoid+;
		@Override public ParserRule getRule() { return rule; }
		
		//'detectors:' avoiders+=Avoid+
		public Group getGroup() { return cGroup; }
		
		//'detectors:'
		public Keyword getDetectorsKeyword_0() { return cDetectorsKeyword_0; }
		
		//avoiders+=Avoid+
		public Assignment getAvoidersAssignment_1() { return cAvoidersAssignment_1; }
		
		//Avoid
		public RuleCall getAvoidersAvoidParserRuleCall_1_0() { return cAvoidersAvoidParserRuleCall_1_0; }
	}
	public class DriveUntilElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mars.ru.des.robot.TaskDSL.DriveUntil");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDriveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSpeedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSpeedSpeedEnumRuleCall_1_0 = (RuleCall)cSpeedAssignment_1.eContents().get(0);
		private final Keyword cUntilKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColorColorEnumRuleCall_3_0 = (RuleCall)cColorAssignment_3.eContents().get(0);
		private final Assignment cObjectAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cObjectObjectEnumRuleCall_4_0 = (RuleCall)cObjectAssignment_4.eContents().get(0);
		private final Keyword cFoundKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DriveUntil:
		//	'Drive'
		//	speed=Speed?
		//	'Until'
		//	color=Color?
		//	object=Object
		//	'Found';
		@Override public ParserRule getRule() { return rule; }
		
		//'Drive' speed=Speed? 'Until' color=Color? object=Object 'Found'
		public Group getGroup() { return cGroup; }
		
		//'Drive'
		public Keyword getDriveKeyword_0() { return cDriveKeyword_0; }
		
		//speed=Speed?
		public Assignment getSpeedAssignment_1() { return cSpeedAssignment_1; }
		
		//Speed
		public RuleCall getSpeedSpeedEnumRuleCall_1_0() { return cSpeedSpeedEnumRuleCall_1_0; }
		
		//'Until'
		public Keyword getUntilKeyword_2() { return cUntilKeyword_2; }
		
		//color=Color?
		public Assignment getColorAssignment_3() { return cColorAssignment_3; }
		
		//Color
		public RuleCall getColorColorEnumRuleCall_3_0() { return cColorColorEnumRuleCall_3_0; }
		
		//object=Object
		public Assignment getObjectAssignment_4() { return cObjectAssignment_4; }
		
		//Object
		public RuleCall getObjectObjectEnumRuleCall_4_0() { return cObjectObjectEnumRuleCall_4_0; }
		
		//'Found'
		public Keyword getFoundKeyword_5() { return cFoundKeyword_5; }
	}
	public class InvestigateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mars.ru.des.robot.TaskDSL.Investigate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvestigateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSpeedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSpeedSpeedEnumRuleCall_1_0 = (RuleCall)cSpeedAssignment_1.eContents().get(0);
		
		//Investigate:
		//	'Investigate'
		//	speed=Speed;
		@Override public ParserRule getRule() { return rule; }
		
		//'Investigate' speed=Speed
		public Group getGroup() { return cGroup; }
		
		//'Investigate'
		public Keyword getInvestigateKeyword_0() { return cInvestigateKeyword_0; }
		
		//speed=Speed
		public Assignment getSpeedAssignment_1() { return cSpeedAssignment_1; }
		
		//Speed
		public RuleCall getSpeedSpeedEnumRuleCall_1_0() { return cSpeedSpeedEnumRuleCall_1_0; }
	}
	public class SpeakElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mars.ru.des.robot.TaskDSL.Speak");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpeakKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//Speak:
		//	'Speak'
		//	text=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Speak' text=STRING
		public Group getGroup() { return cGroup; }
		
		//'Speak'
		public Keyword getSpeakKeyword_0() { return cSpeakKeyword_0; }
		
		//text=STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }
	}
	public class FollowLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mars.ru.des.robot.TaskDSL.FollowLine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFindAndFollowLineForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDistanceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDistanceINTTerminalRuleCall_1_0 = (RuleCall)cDistanceAssignment_1.eContents().get(0);
		private final Keyword cMetersKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FollowLine:
		//	'FindAndFollowLineFor'
		//	distance=INT 'meters';
		@Override public ParserRule getRule() { return rule; }
		
		//'FindAndFollowLineFor' distance=INT 'meters'
		public Group getGroup() { return cGroup; }
		
		//'FindAndFollowLineFor'
		public Keyword getFindAndFollowLineForKeyword_0() { return cFindAndFollowLineForKeyword_0; }
		
		//distance=INT
		public Assignment getDistanceAssignment_1() { return cDistanceAssignment_1; }
		
		//INT
		public RuleCall getDistanceINTTerminalRuleCall_1_0() { return cDistanceINTTerminalRuleCall_1_0; }
		
		//'meters'
		public Keyword getMetersKeyword_2() { return cMetersKeyword_2; }
	}
	public class AvoidElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mars.ru.des.robot.TaskDSL.Avoid");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAvoidKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cColorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColorColorEnumRuleCall_1_0 = (RuleCall)cColorAssignment_1.eContents().get(0);
		private final Assignment cObjectAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObjectObjectEnumRuleCall_2_0 = (RuleCall)cObjectAssignment_2.eContents().get(0);
		private final Keyword cByKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDriveActionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDriveActionsDriveActionParserRuleCall_4_0 = (RuleCall)cDriveActionsAssignment_4.eContents().get(0);
		
		//Avoid:
		//	'Avoid'
		//	color=Color?
		//	object=Object
		//	'By'
		//	driveActions+=DriveAction+;
		@Override public ParserRule getRule() { return rule; }
		
		//'Avoid' color=Color? object=Object 'By' driveActions+=DriveAction+
		public Group getGroup() { return cGroup; }
		
		//'Avoid'
		public Keyword getAvoidKeyword_0() { return cAvoidKeyword_0; }
		
		//color=Color?
		public Assignment getColorAssignment_1() { return cColorAssignment_1; }
		
		//Color
		public RuleCall getColorColorEnumRuleCall_1_0() { return cColorColorEnumRuleCall_1_0; }
		
		//object=Object
		public Assignment getObjectAssignment_2() { return cObjectAssignment_2; }
		
		//Object
		public RuleCall getObjectObjectEnumRuleCall_2_0() { return cObjectObjectEnumRuleCall_2_0; }
		
		//'By'
		public Keyword getByKeyword_3() { return cByKeyword_3; }
		
		//driveActions+=DriveAction+
		public Assignment getDriveActionsAssignment_4() { return cDriveActionsAssignment_4; }
		
		//DriveAction
		public RuleCall getDriveActionsDriveActionParserRuleCall_4_0() { return cDriveActionsDriveActionParserRuleCall_4_0; }
	}
	public class DriveActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mars.ru.des.robot.TaskDSL.DriveAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cMoveBackParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cTurnLeftParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cTurnRightParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Keyword cAndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DriveAction:
		//	(MoveBack | TurnLeft | TurnRight) 'and'?;
		@Override public ParserRule getRule() { return rule; }
		
		//(MoveBack | TurnLeft | TurnRight) 'and'?
		public Group getGroup() { return cGroup; }
		
		//MoveBack | TurnLeft | TurnRight
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//MoveBack
		public RuleCall getMoveBackParserRuleCall_0_0() { return cMoveBackParserRuleCall_0_0; }
		
		//TurnLeft
		public RuleCall getTurnLeftParserRuleCall_0_1() { return cTurnLeftParserRuleCall_0_1; }
		
		//TurnRight
		public RuleCall getTurnRightParserRuleCall_0_2() { return cTurnRightParserRuleCall_0_2; }
		
		//'and'?
		public Keyword getAndKeyword_1() { return cAndKeyword_1; }
	}
	public class MoveBackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mars.ru.des.robot.TaskDSL.MoveBack");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMoveBackwardsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMetersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMetersINTTerminalRuleCall_1_0 = (RuleCall)cMetersAssignment_1.eContents().get(0);
		private final Keyword cMetersKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MoveBack:
		//	'MoveBackwards'
		//	meters=INT 'meters';
		@Override public ParserRule getRule() { return rule; }
		
		//'MoveBackwards' meters=INT 'meters'
		public Group getGroup() { return cGroup; }
		
		//'MoveBackwards'
		public Keyword getMoveBackwardsKeyword_0() { return cMoveBackwardsKeyword_0; }
		
		//meters=INT
		public Assignment getMetersAssignment_1() { return cMetersAssignment_1; }
		
		//INT
		public RuleCall getMetersINTTerminalRuleCall_1_0() { return cMetersINTTerminalRuleCall_1_0; }
		
		//'meters'
		public Keyword getMetersKeyword_2() { return cMetersKeyword_2; }
	}
	public class TurnLeftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mars.ru.des.robot.TaskDSL.TurnLeft");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTurnLeftKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDegreesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDegreesINTTerminalRuleCall_1_0 = (RuleCall)cDegreesAssignment_1.eContents().get(0);
		private final Keyword cDegreesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TurnLeft:
		//	'TurnLeft'
		//	degrees=INT 'degrees';
		@Override public ParserRule getRule() { return rule; }
		
		//'TurnLeft' degrees=INT 'degrees'
		public Group getGroup() { return cGroup; }
		
		//'TurnLeft'
		public Keyword getTurnLeftKeyword_0() { return cTurnLeftKeyword_0; }
		
		//degrees=INT
		public Assignment getDegreesAssignment_1() { return cDegreesAssignment_1; }
		
		//INT
		public RuleCall getDegreesINTTerminalRuleCall_1_0() { return cDegreesINTTerminalRuleCall_1_0; }
		
		//'degrees'
		public Keyword getDegreesKeyword_2() { return cDegreesKeyword_2; }
	}
	public class TurnRightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mars.ru.des.robot.TaskDSL.TurnRight");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTurnRightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDegreesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDegreesINTTerminalRuleCall_1_0 = (RuleCall)cDegreesAssignment_1.eContents().get(0);
		private final Keyword cDegreesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TurnRight:
		//	'TurnRight'
		//	degrees=INT 'degrees';
		@Override public ParserRule getRule() { return rule; }
		
		//'TurnRight' degrees=INT 'degrees'
		public Group getGroup() { return cGroup; }
		
		//'TurnRight'
		public Keyword getTurnRightKeyword_0() { return cTurnRightKeyword_0; }
		
		//degrees=INT
		public Assignment getDegreesAssignment_1() { return cDegreesAssignment_1; }
		
		//INT
		public RuleCall getDegreesINTTerminalRuleCall_1_0() { return cDegreesINTTerminalRuleCall_1_0; }
		
		//'degrees'
		public Keyword getDegreesKeyword_2() { return cDegreesKeyword_2; }
	}
	
	public class ObjectElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "mars.ru.des.robot.TaskDSL.Object");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cROCKEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cROCKROCKKeyword_0_0 = (Keyword)cROCKEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLAKEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLAKELAKEKeyword_1_0 = (Keyword)cLAKEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Object:
		//	ROCK | LAKE;
		public EnumRule getRule() { return rule; }
		
		//ROCK | LAKE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ROCK
		public EnumLiteralDeclaration getROCKEnumLiteralDeclaration_0() { return cROCKEnumLiteralDeclaration_0; }
		
		//"ROCK"
		public Keyword getROCKROCKKeyword_0_0() { return cROCKROCKKeyword_0_0; }
		
		//LAKE
		public EnumLiteralDeclaration getLAKEEnumLiteralDeclaration_1() { return cLAKEEnumLiteralDeclaration_1; }
		
		//"LAKE"
		public Keyword getLAKELAKEKeyword_1_0() { return cLAKELAKEKeyword_1_0; }
	}
	public class SpeedElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "mars.ru.des.robot.TaskDSL.Speed");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFASTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFASTFASTKeyword_0_0 = (Keyword)cFASTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNORMALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNORMALNORMALKeyword_1_0 = (Keyword)cNORMALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSLOWEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSLOWSLOWKeyword_2_0 = (Keyword)cSLOWEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Speed:
		//	FAST | NORMAL | SLOW;
		public EnumRule getRule() { return rule; }
		
		//FAST | NORMAL | SLOW
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FAST
		public EnumLiteralDeclaration getFASTEnumLiteralDeclaration_0() { return cFASTEnumLiteralDeclaration_0; }
		
		//"FAST"
		public Keyword getFASTFASTKeyword_0_0() { return cFASTFASTKeyword_0_0; }
		
		//NORMAL
		public EnumLiteralDeclaration getNORMALEnumLiteralDeclaration_1() { return cNORMALEnumLiteralDeclaration_1; }
		
		//"NORMAL"
		public Keyword getNORMALNORMALKeyword_1_0() { return cNORMALNORMALKeyword_1_0; }
		
		//SLOW
		public EnumLiteralDeclaration getSLOWEnumLiteralDeclaration_2() { return cSLOWEnumLiteralDeclaration_2; }
		
		//"SLOW"
		public Keyword getSLOWSLOWKeyword_2_0() { return cSLOWSLOWKeyword_2_0; }
	}
	public class ColorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "mars.ru.des.robot.TaskDSL.Color");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cREDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cREDREDKeyword_0_0 = (Keyword)cREDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGREENEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGREENGREENKeyword_1_0 = (Keyword)cGREENEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBLUEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBLUEBLUEKeyword_2_0 = (Keyword)cBLUEEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Color:
		//	RED | GREEN | BLUE;
		public EnumRule getRule() { return rule; }
		
		//RED | GREEN | BLUE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RED
		public EnumLiteralDeclaration getREDEnumLiteralDeclaration_0() { return cREDEnumLiteralDeclaration_0; }
		
		//"RED"
		public Keyword getREDREDKeyword_0_0() { return cREDREDKeyword_0_0; }
		
		//GREEN
		public EnumLiteralDeclaration getGREENEnumLiteralDeclaration_1() { return cGREENEnumLiteralDeclaration_1; }
		
		//"GREEN"
		public Keyword getGREENGREENKeyword_1_0() { return cGREENGREENKeyword_1_0; }
		
		//BLUE
		public EnumLiteralDeclaration getBLUEEnumLiteralDeclaration_2() { return cBLUEEnumLiteralDeclaration_2; }
		
		//"BLUE"
		public Keyword getBLUEBLUEKeyword_2_0() { return cBLUEBLUEKeyword_2_0; }
	}
	
	private final DSLElements pDSL;
	private final MissionElements pMission;
	private final TaskElements pTask;
	private final ActionElements pAction;
	private final DetectorElements pDetector;
	private final DriveUntilElements pDriveUntil;
	private final InvestigateElements pInvestigate;
	private final SpeakElements pSpeak;
	private final FollowLineElements pFollowLine;
	private final AvoidElements pAvoid;
	private final DriveActionElements pDriveAction;
	private final MoveBackElements pMoveBack;
	private final TurnLeftElements pTurnLeft;
	private final TurnRightElements pTurnRight;
	private final ObjectElements eObject;
	private final SpeedElements eSpeed;
	private final ColorElements eColor;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TaskDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDSL = new DSLElements();
		this.pMission = new MissionElements();
		this.pTask = new TaskElements();
		this.pAction = new ActionElements();
		this.pDetector = new DetectorElements();
		this.pDriveUntil = new DriveUntilElements();
		this.pInvestigate = new InvestigateElements();
		this.pSpeak = new SpeakElements();
		this.pFollowLine = new FollowLineElements();
		this.pAvoid = new AvoidElements();
		this.pDriveAction = new DriveActionElements();
		this.pMoveBack = new MoveBackElements();
		this.pTurnLeft = new TurnLeftElements();
		this.pTurnRight = new TurnRightElements();
		this.eObject = new ObjectElements();
		this.eSpeed = new SpeedElements();
		this.eColor = new ColorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("mars.ru.des.robot.TaskDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DSL:
	//	missions+=Mission*
	//	tasks+=Task*;
	public DSLElements getDSLAccess() {
		return pDSL;
	}
	
	public ParserRule getDSLRule() {
		return getDSLAccess().getRule();
	}
	
	//Mission:
	//	'Mission:' name=ID
	//	"tasks:"
	//	tasks+=[Task]+;
	public MissionElements getMissionAccess() {
		return pMission;
	}
	
	public ParserRule getMissionRule() {
		return getMissionAccess().getRule();
	}
	
	//Task:
	//	'Task:' name=ID
	//	action=Action
	//	detector=Detector?;
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}
	
	//Action:
	//	'action:'
	//	DriveUntil | Investigate | Speak | FollowLine;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Detector:
	//	'detectors:'
	//	avoiders+=Avoid+;
	public DetectorElements getDetectorAccess() {
		return pDetector;
	}
	
	public ParserRule getDetectorRule() {
		return getDetectorAccess().getRule();
	}
	
	//DriveUntil:
	//	'Drive'
	//	speed=Speed?
	//	'Until'
	//	color=Color?
	//	object=Object
	//	'Found';
	public DriveUntilElements getDriveUntilAccess() {
		return pDriveUntil;
	}
	
	public ParserRule getDriveUntilRule() {
		return getDriveUntilAccess().getRule();
	}
	
	//Investigate:
	//	'Investigate'
	//	speed=Speed;
	public InvestigateElements getInvestigateAccess() {
		return pInvestigate;
	}
	
	public ParserRule getInvestigateRule() {
		return getInvestigateAccess().getRule();
	}
	
	//Speak:
	//	'Speak'
	//	text=STRING;
	public SpeakElements getSpeakAccess() {
		return pSpeak;
	}
	
	public ParserRule getSpeakRule() {
		return getSpeakAccess().getRule();
	}
	
	//FollowLine:
	//	'FindAndFollowLineFor'
	//	distance=INT 'meters';
	public FollowLineElements getFollowLineAccess() {
		return pFollowLine;
	}
	
	public ParserRule getFollowLineRule() {
		return getFollowLineAccess().getRule();
	}
	
	//Avoid:
	//	'Avoid'
	//	color=Color?
	//	object=Object
	//	'By'
	//	driveActions+=DriveAction+;
	public AvoidElements getAvoidAccess() {
		return pAvoid;
	}
	
	public ParserRule getAvoidRule() {
		return getAvoidAccess().getRule();
	}
	
	//DriveAction:
	//	(MoveBack | TurnLeft | TurnRight) 'and'?;
	public DriveActionElements getDriveActionAccess() {
		return pDriveAction;
	}
	
	public ParserRule getDriveActionRule() {
		return getDriveActionAccess().getRule();
	}
	
	//MoveBack:
	//	'MoveBackwards'
	//	meters=INT 'meters';
	public MoveBackElements getMoveBackAccess() {
		return pMoveBack;
	}
	
	public ParserRule getMoveBackRule() {
		return getMoveBackAccess().getRule();
	}
	
	//TurnLeft:
	//	'TurnLeft'
	//	degrees=INT 'degrees';
	public TurnLeftElements getTurnLeftAccess() {
		return pTurnLeft;
	}
	
	public ParserRule getTurnLeftRule() {
		return getTurnLeftAccess().getRule();
	}
	
	//TurnRight:
	//	'TurnRight'
	//	degrees=INT 'degrees';
	public TurnRightElements getTurnRightAccess() {
		return pTurnRight;
	}
	
	public ParserRule getTurnRightRule() {
		return getTurnRightAccess().getRule();
	}
	
	//enum Object:
	//	ROCK | LAKE;
	public ObjectElements getObjectAccess() {
		return eObject;
	}
	
	public EnumRule getObjectRule() {
		return getObjectAccess().getRule();
	}
	
	//enum Speed:
	//	FAST | NORMAL | SLOW;
	public SpeedElements getSpeedAccess() {
		return eSpeed;
	}
	
	public EnumRule getSpeedRule() {
		return getSpeedAccess().getRule();
	}
	
	//enum Color:
	//	RED | GREEN | BLUE;
	public ColorElements getColorAccess() {
		return eColor;
	}
	
	public EnumRule getColorRule() {
		return getColorAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

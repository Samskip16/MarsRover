/**
 * generated by Xtext 2.15.0
 */
package mars.ru.des.robot.taskDSL.impl;

import mars.ru.des.robot.taskDSL.Action;
import mars.ru.des.robot.taskDSL.Avoid;
import mars.ru.des.robot.taskDSL.AvoidAction;
import mars.ru.des.robot.taskDSL.Color;
import mars.ru.des.robot.taskDSL.Detectors;
import mars.ru.des.robot.taskDSL.DriveUntil;
import mars.ru.des.robot.taskDSL.FollowLine;
import mars.ru.des.robot.taskDSL.Investigate;
import mars.ru.des.robot.taskDSL.Mission;
import mars.ru.des.robot.taskDSL.MoveBack;
import mars.ru.des.robot.taskDSL.Speak;
import mars.ru.des.robot.taskDSL.Speed;
import mars.ru.des.robot.taskDSL.Task;
import mars.ru.des.robot.taskDSL.TaskDSLFactory;
import mars.ru.des.robot.taskDSL.TaskDSLPackage;
import mars.ru.des.robot.taskDSL.Turn;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class TaskDSLFactoryImpl extends EFactoryImpl implements TaskDSLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static TaskDSLFactory init()
  {
    try
    {
      TaskDSLFactory theTaskDSLFactory = (TaskDSLFactory)EPackage.Registry.INSTANCE.getEFactory(TaskDSLPackage.eNS_URI);
      if (theTaskDSLFactory != null)
      {
        return theTaskDSLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new TaskDSLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TaskDSLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case TaskDSLPackage.TASK: return createTask();
      case TaskDSLPackage.MISSION: return createMission();
      case TaskDSLPackage.ACTION: return createAction();
      case TaskDSLPackage.DETECTORS: return createDetectors();
      case TaskDSLPackage.DRIVE_UNTIL: return createDriveUntil();
      case TaskDSLPackage.INVESTIGATE: return createInvestigate();
      case TaskDSLPackage.SPEAK: return createSpeak();
      case TaskDSLPackage.FOLLOW_LINE: return createFollowLine();
      case TaskDSLPackage.AVOID: return createAvoid();
      case TaskDSLPackage.AVOID_ACTION: return createAvoidAction();
      case TaskDSLPackage.MOVE_BACK: return createMoveBack();
      case TaskDSLPackage.TURN: return createTurn();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case TaskDSLPackage.OBJECT:
        return createObjectFromString(eDataType, initialValue);
      case TaskDSLPackage.SPEED:
        return createSpeedFromString(eDataType, initialValue);
      case TaskDSLPackage.COLOR:
        return createColorFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case TaskDSLPackage.OBJECT:
        return convertObjectToString(eDataType, instanceValue);
      case TaskDSLPackage.SPEED:
        return convertSpeedToString(eDataType, instanceValue);
      case TaskDSLPackage.COLOR:
        return convertColorToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Task createTask()
  {
    TaskImpl task = new TaskImpl();
    return task;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Mission createMission()
  {
    MissionImpl mission = new MissionImpl();
    return mission;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Action createAction()
  {
    ActionImpl action = new ActionImpl();
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Detectors createDetectors()
  {
    DetectorsImpl detectors = new DetectorsImpl();
    return detectors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DriveUntil createDriveUntil()
  {
    DriveUntilImpl driveUntil = new DriveUntilImpl();
    return driveUntil;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Investigate createInvestigate()
  {
    InvestigateImpl investigate = new InvestigateImpl();
    return investigate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Speak createSpeak()
  {
    SpeakImpl speak = new SpeakImpl();
    return speak;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FollowLine createFollowLine()
  {
    FollowLineImpl followLine = new FollowLineImpl();
    return followLine;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Avoid createAvoid()
  {
    AvoidImpl avoid = new AvoidImpl();
    return avoid;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AvoidAction createAvoidAction()
  {
    AvoidActionImpl avoidAction = new AvoidActionImpl();
    return avoidAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MoveBack createMoveBack()
  {
    MoveBackImpl moveBack = new MoveBackImpl();
    return moveBack;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Turn createTurn()
  {
    TurnImpl turn = new TurnImpl();
    return turn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public mars.ru.des.robot.taskDSL.Object createObjectFromString(EDataType eDataType, String initialValue)
  {
    mars.ru.des.robot.taskDSL.Object result = mars.ru.des.robot.taskDSL.Object.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertObjectToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Speed createSpeedFromString(EDataType eDataType, String initialValue)
  {
    Speed result = Speed.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertSpeedToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Color createColorFromString(EDataType eDataType, String initialValue)
  {
    Color result = Color.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertColorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TaskDSLPackage getTaskDSLPackage()
  {
    return (TaskDSLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static TaskDSLPackage getPackage()
  {
    return TaskDSLPackage.eINSTANCE;
  }

} //TaskDSLFactoryImpl

/**
 * generated by Xtext 2.15.0
 */
package mars.ru.des.robot.taskDSL.util;

import mars.ru.des.robot.taskDSL.Action;
import mars.ru.des.robot.taskDSL.Avoid;
import mars.ru.des.robot.taskDSL.AvoidAction;
import mars.ru.des.robot.taskDSL.Detectors;
import mars.ru.des.robot.taskDSL.DriveUntil;
import mars.ru.des.robot.taskDSL.FollowLine;
import mars.ru.des.robot.taskDSL.Investigate;
import mars.ru.des.robot.taskDSL.Mission;
import mars.ru.des.robot.taskDSL.MoveBack;
import mars.ru.des.robot.taskDSL.Speak;
import mars.ru.des.robot.taskDSL.Task;
import mars.ru.des.robot.taskDSL.TaskDSLPackage;
import mars.ru.des.robot.taskDSL.Turn;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see mars.ru.des.robot.taskDSL.TaskDSLPackage
 * @generated
 */
public class TaskDSLAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static TaskDSLPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TaskDSLAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = TaskDSLPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TaskDSLSwitch<Adapter> modelSwitch =
    new TaskDSLSwitch<Adapter>()
    {
      @Override
      public Adapter caseTask(Task object)
      {
        return createTaskAdapter();
      }
      @Override
      public Adapter caseMission(Mission object)
      {
        return createMissionAdapter();
      }
      @Override
      public Adapter caseAction(Action object)
      {
        return createActionAdapter();
      }
      @Override
      public Adapter caseDetectors(Detectors object)
      {
        return createDetectorsAdapter();
      }
      @Override
      public Adapter caseDriveUntil(DriveUntil object)
      {
        return createDriveUntilAdapter();
      }
      @Override
      public Adapter caseInvestigate(Investigate object)
      {
        return createInvestigateAdapter();
      }
      @Override
      public Adapter caseSpeak(Speak object)
      {
        return createSpeakAdapter();
      }
      @Override
      public Adapter caseFollowLine(FollowLine object)
      {
        return createFollowLineAdapter();
      }
      @Override
      public Adapter caseAvoid(Avoid object)
      {
        return createAvoidAdapter();
      }
      @Override
      public Adapter caseAvoidAction(AvoidAction object)
      {
        return createAvoidActionAdapter();
      }
      @Override
      public Adapter caseMoveBack(MoveBack object)
      {
        return createMoveBackAdapter();
      }
      @Override
      public Adapter caseTurn(Turn object)
      {
        return createTurnAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link mars.ru.des.robot.taskDSL.Task <em>Task</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mars.ru.des.robot.taskDSL.Task
   * @generated
   */
  public Adapter createTaskAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mars.ru.des.robot.taskDSL.Mission <em>Mission</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mars.ru.des.robot.taskDSL.Mission
   * @generated
   */
  public Adapter createMissionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mars.ru.des.robot.taskDSL.Action <em>Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mars.ru.des.robot.taskDSL.Action
   * @generated
   */
  public Adapter createActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mars.ru.des.robot.taskDSL.Detectors <em>Detectors</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mars.ru.des.robot.taskDSL.Detectors
   * @generated
   */
  public Adapter createDetectorsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mars.ru.des.robot.taskDSL.DriveUntil <em>Drive Until</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mars.ru.des.robot.taskDSL.DriveUntil
   * @generated
   */
  public Adapter createDriveUntilAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mars.ru.des.robot.taskDSL.Investigate <em>Investigate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mars.ru.des.robot.taskDSL.Investigate
   * @generated
   */
  public Adapter createInvestigateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mars.ru.des.robot.taskDSL.Speak <em>Speak</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mars.ru.des.robot.taskDSL.Speak
   * @generated
   */
  public Adapter createSpeakAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mars.ru.des.robot.taskDSL.FollowLine <em>Follow Line</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mars.ru.des.robot.taskDSL.FollowLine
   * @generated
   */
  public Adapter createFollowLineAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mars.ru.des.robot.taskDSL.Avoid <em>Avoid</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mars.ru.des.robot.taskDSL.Avoid
   * @generated
   */
  public Adapter createAvoidAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mars.ru.des.robot.taskDSL.AvoidAction <em>Avoid Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mars.ru.des.robot.taskDSL.AvoidAction
   * @generated
   */
  public Adapter createAvoidActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mars.ru.des.robot.taskDSL.MoveBack <em>Move Back</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mars.ru.des.robot.taskDSL.MoveBack
   * @generated
   */
  public Adapter createMoveBackAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mars.ru.des.robot.taskDSL.Turn <em>Turn</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mars.ru.des.robot.taskDSL.Turn
   * @generated
   */
  public Adapter createTurnAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //TaskDSLAdapterFactory

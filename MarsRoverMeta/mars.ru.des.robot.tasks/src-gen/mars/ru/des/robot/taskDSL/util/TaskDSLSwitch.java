/**
 * generated by Xtext 2.15.0
 */
package mars.ru.des.robot.taskDSL.util;

import mars.ru.des.robot.taskDSL.Action;
import mars.ru.des.robot.taskDSL.Avoid;
import mars.ru.des.robot.taskDSL.DSL;
import mars.ru.des.robot.taskDSL.Detector;
import mars.ru.des.robot.taskDSL.DriveAction;
import mars.ru.des.robot.taskDSL.DriveUntil;
import mars.ru.des.robot.taskDSL.FollowLine;
import mars.ru.des.robot.taskDSL.Investigate;
import mars.ru.des.robot.taskDSL.Mission;
import mars.ru.des.robot.taskDSL.MoveBack;
import mars.ru.des.robot.taskDSL.Speak;
import mars.ru.des.robot.taskDSL.Task;
import mars.ru.des.robot.taskDSL.TaskDSLPackage;
import mars.ru.des.robot.taskDSL.TurnLeft;
import mars.ru.des.robot.taskDSL.TurnRight;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see mars.ru.des.robot.taskDSL.TaskDSLPackage
 * @generated
 */
public class TaskDSLSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static TaskDSLPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TaskDSLSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = TaskDSLPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case TaskDSLPackage.DSL:
      {
        DSL dsl = (DSL)theEObject;
        T result = caseDSL(dsl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TaskDSLPackage.MISSION:
      {
        Mission mission = (Mission)theEObject;
        T result = caseMission(mission);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TaskDSLPackage.TASK:
      {
        Task task = (Task)theEObject;
        T result = caseTask(task);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TaskDSLPackage.ACTION:
      {
        Action action = (Action)theEObject;
        T result = caseAction(action);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TaskDSLPackage.DETECTOR:
      {
        Detector detector = (Detector)theEObject;
        T result = caseDetector(detector);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TaskDSLPackage.DRIVE_UNTIL:
      {
        DriveUntil driveUntil = (DriveUntil)theEObject;
        T result = caseDriveUntil(driveUntil);
        if (result == null) result = caseAction(driveUntil);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TaskDSLPackage.INVESTIGATE:
      {
        Investigate investigate = (Investigate)theEObject;
        T result = caseInvestigate(investigate);
        if (result == null) result = caseAction(investigate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TaskDSLPackage.SPEAK:
      {
        Speak speak = (Speak)theEObject;
        T result = caseSpeak(speak);
        if (result == null) result = caseAction(speak);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TaskDSLPackage.FOLLOW_LINE:
      {
        FollowLine followLine = (FollowLine)theEObject;
        T result = caseFollowLine(followLine);
        if (result == null) result = caseAction(followLine);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TaskDSLPackage.AVOID:
      {
        Avoid avoid = (Avoid)theEObject;
        T result = caseAvoid(avoid);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TaskDSLPackage.DRIVE_ACTION:
      {
        DriveAction driveAction = (DriveAction)theEObject;
        T result = caseDriveAction(driveAction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TaskDSLPackage.MOVE_BACK:
      {
        MoveBack moveBack = (MoveBack)theEObject;
        T result = caseMoveBack(moveBack);
        if (result == null) result = caseDriveAction(moveBack);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TaskDSLPackage.TURN_LEFT:
      {
        TurnLeft turnLeft = (TurnLeft)theEObject;
        T result = caseTurnLeft(turnLeft);
        if (result == null) result = caseDriveAction(turnLeft);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TaskDSLPackage.TURN_RIGHT:
      {
        TurnRight turnRight = (TurnRight)theEObject;
        T result = caseTurnRight(turnRight);
        if (result == null) result = caseDriveAction(turnRight);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSL(DSL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mission</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mission</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMission(Mission object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Task</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Task</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTask(Task object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAction(Action object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Detector</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Detector</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDetector(Detector object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Drive Until</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Drive Until</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDriveUntil(DriveUntil object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Investigate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Investigate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInvestigate(Investigate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Speak</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Speak</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSpeak(Speak object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Follow Line</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Follow Line</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFollowLine(FollowLine object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Avoid</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Avoid</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAvoid(Avoid object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Drive Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Drive Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDriveAction(DriveAction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Move Back</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Move Back</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMoveBack(MoveBack object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Turn Left</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Turn Left</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTurnLeft(TurnLeft object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Turn Right</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Turn Right</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTurnRight(TurnRight object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //TaskDSLSwitch

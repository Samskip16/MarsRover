/*
 * generated by Xtext 2.15.0
 */
package mars.ru.des.robot.serializer;

import com.google.inject.Inject;
import java.util.Set;
import mars.ru.des.robot.services.TaskDSLGrammarAccess;
import mars.ru.des.robot.taskDSL.Avoid;
import mars.ru.des.robot.taskDSL.Detectors;
import mars.ru.des.robot.taskDSL.DriveUntil;
import mars.ru.des.robot.taskDSL.FollowLine;
import mars.ru.des.robot.taskDSL.Investigate;
import mars.ru.des.robot.taskDSL.Mission;
import mars.ru.des.robot.taskDSL.MoveBack;
import mars.ru.des.robot.taskDSL.Speak;
import mars.ru.des.robot.taskDSL.Task;
import mars.ru.des.robot.taskDSL.TaskDSLPackage;
import mars.ru.des.robot.taskDSL.Turn;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class TaskDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TaskDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TaskDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TaskDSLPackage.AVOID:
				sequence_Avoid(context, (Avoid) semanticObject); 
				return; 
			case TaskDSLPackage.DETECTORS:
				sequence_Detectors(context, (Detectors) semanticObject); 
				return; 
			case TaskDSLPackage.DRIVE_UNTIL:
				sequence_DriveUntil(context, (DriveUntil) semanticObject); 
				return; 
			case TaskDSLPackage.FOLLOW_LINE:
				sequence_FollowLine(context, (FollowLine) semanticObject); 
				return; 
			case TaskDSLPackage.INVESTIGATE:
				sequence_Investigate(context, (Investigate) semanticObject); 
				return; 
			case TaskDSLPackage.MISSION:
				sequence_Mission(context, (Mission) semanticObject); 
				return; 
			case TaskDSLPackage.MOVE_BACK:
				sequence_MoveBack(context, (MoveBack) semanticObject); 
				return; 
			case TaskDSLPackage.SPEAK:
				sequence_Speak(context, (Speak) semanticObject); 
				return; 
			case TaskDSLPackage.TASK:
				sequence_Task(context, (Task) semanticObject); 
				return; 
			case TaskDSLPackage.TURN:
				sequence_Turn(context, (Turn) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Avoid returns Avoid
	 *
	 * Constraint:
	 *     (color=Color? object=Object avoidActions+=AvoidAction+)
	 */
	protected void sequence_Avoid(ISerializationContext context, Avoid semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Detectors returns Detectors
	 *
	 * Constraint:
	 *     avoids+=Avoid+
	 */
	protected void sequence_Detectors(ISerializationContext context, Detectors semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns DriveUntil
	 *     DriveUntil returns DriveUntil
	 *
	 * Constraint:
	 *     (speed=Speed? color=Color? object=Object)
	 */
	protected void sequence_DriveUntil(ISerializationContext context, DriveUntil semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns FollowLine
	 *     FollowLine returns FollowLine
	 *
	 * Constraint:
	 *     distance=INT
	 */
	protected void sequence_FollowLine(ISerializationContext context, FollowLine semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TaskDSLPackage.Literals.FOLLOW_LINE__DISTANCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TaskDSLPackage.Literals.FOLLOW_LINE__DISTANCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFollowLineAccess().getDistanceINTTerminalRuleCall_1_0(), semanticObject.getDistance());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Investigate
	 *     Investigate returns Investigate
	 *
	 * Constraint:
	 *     speed=Speed
	 */
	protected void sequence_Investigate(ISerializationContext context, Investigate semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TaskDSLPackage.Literals.INVESTIGATE__SPEED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TaskDSLPackage.Literals.INVESTIGATE__SPEED));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInvestigateAccess().getSpeedSpeedEnumRuleCall_1_0(), semanticObject.getSpeed());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Mission returns Mission
	 *
	 * Constraint:
	 *     (name=ID tasks=[Task|ID])
	 */
	protected void sequence_Mission(ISerializationContext context, Mission semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TaskDSLPackage.Literals.MISSION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TaskDSLPackage.Literals.MISSION__NAME));
			if (transientValues.isValueTransient(semanticObject, TaskDSLPackage.Literals.MISSION__TASKS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TaskDSLPackage.Literals.MISSION__TASKS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMissionAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMissionAccess().getTasksTaskIDTerminalRuleCall_3_0_1(), semanticObject.eGet(TaskDSLPackage.Literals.MISSION__TASKS, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AvoidAction returns MoveBack
	 *     MoveBack returns MoveBack
	 *
	 * Constraint:
	 *     distance=INT
	 */
	protected void sequence_MoveBack(ISerializationContext context, MoveBack semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TaskDSLPackage.Literals.MOVE_BACK__DISTANCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TaskDSLPackage.Literals.MOVE_BACK__DISTANCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMoveBackAccess().getDistanceINTTerminalRuleCall_1_0(), semanticObject.getDistance());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Speak
	 *     Speak returns Speak
	 *
	 * Constraint:
	 *     text=STRING
	 */
	protected void sequence_Speak(ISerializationContext context, Speak semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TaskDSLPackage.Literals.SPEAK__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TaskDSLPackage.Literals.SPEAK__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSpeakAccess().getTextSTRINGTerminalRuleCall_1_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Task returns Task
	 *
	 * Constraint:
	 *     (name=ID action=Action detector=Detectors?)
	 */
	protected void sequence_Task(ISerializationContext context, Task semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AvoidAction returns Turn
	 *     Turn returns Turn
	 *
	 * Constraint:
	 *     degrees=INT
	 */
	protected void sequence_Turn(ISerializationContext context, Turn semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TaskDSLPackage.Literals.TURN__DEGREES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TaskDSLPackage.Literals.TURN__DEGREES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTurnAccess().getDegreesINTTerminalRuleCall_1_0(), semanticObject.getDegrees());
		feeder.finish();
	}
	
	
}

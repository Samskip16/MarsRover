/*
 * generated by Xtext 2.15.0
 */
package mars.ru.des.robot.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import mars.ru.des.robot.ide.contentassist.antlr.internal.InternalTaskDSLParser;
import mars.ru.des.robot.services.TaskDSLGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class TaskDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(TaskDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, TaskDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getActionAccess().getAlternatives(), "rule__Action__Alternatives");
			builder.put(grammarAccess.getDriveActionAccess().getAlternatives_0(), "rule__DriveAction__Alternatives_0");
			builder.put(grammarAccess.getObjectAccess().getAlternatives(), "rule__Object__Alternatives");
			builder.put(grammarAccess.getSpeedAccess().getAlternatives(), "rule__Speed__Alternatives");
			builder.put(grammarAccess.getColorAccess().getAlternatives(), "rule__Color__Alternatives");
			builder.put(grammarAccess.getMissionAccess().getGroup(), "rule__Mission__Group__0");
			builder.put(grammarAccess.getTaskAccess().getGroup(), "rule__Task__Group__0");
			builder.put(grammarAccess.getActionAccess().getGroup_0(), "rule__Action__Group_0__0");
			builder.put(grammarAccess.getDetectorAccess().getGroup(), "rule__Detector__Group__0");
			builder.put(grammarAccess.getDriveUntilAccess().getGroup(), "rule__DriveUntil__Group__0");
			builder.put(grammarAccess.getInvestigateAccess().getGroup(), "rule__Investigate__Group__0");
			builder.put(grammarAccess.getSpeakAccess().getGroup(), "rule__Speak__Group__0");
			builder.put(grammarAccess.getFollowLineAccess().getGroup(), "rule__FollowLine__Group__0");
			builder.put(grammarAccess.getAvoidAccess().getGroup(), "rule__Avoid__Group__0");
			builder.put(grammarAccess.getDriveActionAccess().getGroup(), "rule__DriveAction__Group__0");
			builder.put(grammarAccess.getMoveBackAccess().getGroup(), "rule__MoveBack__Group__0");
			builder.put(grammarAccess.getTurnAccess().getGroup(), "rule__Turn__Group__0");
			builder.put(grammarAccess.getMissionAccess().getNameAssignment_1(), "rule__Mission__NameAssignment_1");
			builder.put(grammarAccess.getMissionAccess().getTasksAssignment_3(), "rule__Mission__TasksAssignment_3");
			builder.put(grammarAccess.getTaskAccess().getNameAssignment_1(), "rule__Task__NameAssignment_1");
			builder.put(grammarAccess.getTaskAccess().getActionAssignment_2(), "rule__Task__ActionAssignment_2");
			builder.put(grammarAccess.getTaskAccess().getDetectorAssignment_3(), "rule__Task__DetectorAssignment_3");
			builder.put(grammarAccess.getDetectorAccess().getAvoidersAssignment_1(), "rule__Detector__AvoidersAssignment_1");
			builder.put(grammarAccess.getDriveUntilAccess().getSpeedAssignment_1(), "rule__DriveUntil__SpeedAssignment_1");
			builder.put(grammarAccess.getDriveUntilAccess().getColorAssignment_3(), "rule__DriveUntil__ColorAssignment_3");
			builder.put(grammarAccess.getDriveUntilAccess().getObjectAssignment_4(), "rule__DriveUntil__ObjectAssignment_4");
			builder.put(grammarAccess.getInvestigateAccess().getSpeedAssignment_1(), "rule__Investigate__SpeedAssignment_1");
			builder.put(grammarAccess.getSpeakAccess().getTextAssignment_1(), "rule__Speak__TextAssignment_1");
			builder.put(grammarAccess.getFollowLineAccess().getDistanceAssignment_1(), "rule__FollowLine__DistanceAssignment_1");
			builder.put(grammarAccess.getAvoidAccess().getColorAssignment_1(), "rule__Avoid__ColorAssignment_1");
			builder.put(grammarAccess.getAvoidAccess().getObjectAssignment_2(), "rule__Avoid__ObjectAssignment_2");
			builder.put(grammarAccess.getAvoidAccess().getAvoidActionsAssignment_4(), "rule__Avoid__AvoidActionsAssignment_4");
			builder.put(grammarAccess.getMoveBackAccess().getMetersAssignment_1(), "rule__MoveBack__MetersAssignment_1");
			builder.put(grammarAccess.getTurnAccess().getDegreesAssignment_1(), "rule__Turn__DegreesAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private TaskDSLGrammarAccess grammarAccess;

	@Override
	protected InternalTaskDSLParser createParser() {
		InternalTaskDSLParser result = new InternalTaskDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public TaskDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TaskDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}

/*
 * generated by Xtext 2.15.0
 */
package mars.ru.des.robot.validation

import java.util.List
import mars.ru.des.robot.taskDSL.Action
import mars.ru.des.robot.taskDSL.Avoid
import mars.ru.des.robot.taskDSL.DriveUntil
import mars.ru.des.robot.taskDSL.Task
import org.eclipse.xtext.validation.Check

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class TaskDSLValidator extends AbstractTaskDSLValidator {

	public static val INVALID_NAME = 'invalidName'

	Action ac;
	List<Avoid> avoids;

	@Check
	def checkActionAndDetectorObjectNotTheSame(Task task) {
		ac = task.getAction();
		if (ac instanceof DriveUntil) {
			avoids = task.getDetector().getAvoids();

			for (Avoid av : avoids) {
				if (av.getObject() === ac.getObject() && av.getColor() === ac.getColor()) {
					error('Cannot avoid the same object as you are trying to find', null)
				}
			}
		}

//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					TaskDSLPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
	}

	def dispatch String getObject(DriveUntil action) {
		return action.getObject().toString;
	}

	def dispatch String getObject(DriveUntil action) {
		return action.getObject().toString;
	}

}

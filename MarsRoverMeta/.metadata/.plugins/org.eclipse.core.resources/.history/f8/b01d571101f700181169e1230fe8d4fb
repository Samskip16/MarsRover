/*
 * generated by Xtext 2.15.0
 */
package mars.ru.des.robot.validation

import java.util.ArrayList
import java.util.List
import mars.ru.des.robot.taskDSL.Action
import mars.ru.des.robot.taskDSL.Avoid
import mars.ru.des.robot.taskDSL.Detectors
import mars.ru.des.robot.taskDSL.DriveUntil
import mars.ru.des.robot.taskDSL.MoveBack
import mars.ru.des.robot.taskDSL.Task
import mars.ru.des.robot.taskDSL.Turn
import org.eclipse.xtext.validation.Check

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class TaskDSLValidator extends AbstractTaskDSLValidator {

	public static val INVALID_NAME = 'invalidName'

	Action ac;
	List<String> avoidObjects;
	String s;
	String msg;

	@Check
	def checkActionAndDetectorObjectNotTheSame(Task task) {
		ac = task.getAction();
		if (ac instanceof DriveUntil) {

			for (Avoid av : task.getDetector().getAvoids()) {
				if (av.getObject() === ac.getObject() &&
					((av.getColor() !== null && ac.getColor() === null) ||
						(av.getColor() === null && ac.getColor() !== null) || av.getColor() === ac.getColor()
					)) {

					msg = "Cannot avoid the same object as you are trying to find ('" +
						(if(av.getColor === null) "" else av.getColor.toString() + " ") + av.getObject().toString() +
						"').";

					error(msg, null)
				}
			}
		}
	}

	@Check
	def checkAvoidObjectsMultiplyDefined(Detectors detectors) {
		avoidObjects = new ArrayList();

		for (Avoid av : detectors.getAvoids()) {
			s = stringifyAvoid(av);

			if (avoidObjects.contains(s){
				warning("No use to avoid the same object twice ('" + s + "').", null);
			} else {
				avoidObjects.add(s);
			}
		}
	}

	def String stringifyAvoid(Avoid a) {
		if (a.getColor() === null) {
			return a.getObject().toString();
		} else {
			return a.getObject().toString() + a.getColor().toString();
		}
	}

	@Check
	def distanceInRange(MoveBack action) {
		if (action.getDistance() < 0 || action.getDistance() > 100) {
			error('Distance should be inside achievable bounds (0, 100)', null)
		}
	}

	@Check
	def degreesInRange(Turn action) {
		if (action.getDegrees() < -359 || action.getDegrees() > 359) {
			error('Distance should be inside achievable bounds (-359, 359)', null)
		}
	}

}

package mars.ru.des.robot.generator

import java.util.List
import mars.ru.des.robot.taskDSL.Avoid
import mars.ru.des.robot.taskDSL.DSL
import mars.ru.des.robot.taskDSL.DriveAction
import mars.ru.des.robot.taskDSL.DriveUntil
import mars.ru.des.robot.taskDSL.Investigate
import mars.ru.des.robot.taskDSL.Mission
import mars.ru.des.robot.taskDSL.MoveBack
import mars.ru.des.robot.taskDSL.Object
import mars.ru.des.robot.taskDSL.Speak
import mars.ru.des.robot.taskDSL.Task
import mars.ru.des.robot.taskDSL.TurnLeft
import mars.ru.des.robot.taskDSL.TurnRight

class Brick1Generator {

	def static generate(DSL dsl) '''
		#!/usr/bin/env python3
		from action.colorFinder import ColorFinder
		from avoider.colorAvoider import ColorAvoider
		from bluetooth.bluethooth import Bluetooth
		from color import Color
		from drive.moveAction import MoveAction
		from drive.rotateAction import RotateAction
		from drive.speed import Speed
		from base.mission import Mission
		from base.task import Task
		
		def run():
		    for m in missions:
		        m.execute()
		
		
		print("Starting brick 1")
		missions = []
		
		
		print("Creating tasks...")
		«FOR task : dsl.getTasks()»
			«generateTask(task)»
		«ENDFOR»
		
		print("Creating missions...")
		«FOR mission : dsl.getMissions()»
			«generateMission(mission)»
		«ENDFOR»
		
		print("Connecting as Client...")
		
		b = Bluetooth()
		b.connect_as_client()
		
		run()
	'''

	def static generateMission(Mission mission) '''
		«FOR task : mission.getTasks() BEFORE "missions.append(Mission([" SEPARATOR ", " AFTER "]))"»
			«DslHelper.toName(task)»
		«ENDFOR»
	'''

	def static generateTask(Task task) '''
		«DslHelper.toName(task)» = Task()
		«DslHelper.toName(task)».set_action(«generateAction(task.getAction())»)
		
		«FOR av : task.getDetector().getAvoiders()»
			«DslHelper.toName(task)».add_avoider(«generateAvoider(av)»)
		«ENDFOR»
	'''

	def dispatch static generateAction(DriveUntil action) '''
		«IF action.getObject() === Object.LAKE»
			ColorFinder(«DslHelper.toString(action.getColor())», «DslHelper.toString(action.getSpeed())»)
		«ELSEIF action.getObject() === Object.ROCK»
			RockFinder(«DslHelper.toString(action.getColor())», «DslHelper.toString(action.getSpeed())»)
		«ENDIF»
	'''

	def dispatch static generateAction(Investigate action) '''
		Investigator(«DslHelper.toString(action.getSpeed())»)
	'''

	def dispatch static generateAction(Speak action) '''
		Speaker("«action.getText()»")
	'''

	def static generateAvoider(Avoid avoid) '''
		«IF avoid.getObject() === Object.LAKE»
			ColorAvoider(«DslHelper.toString(avoid.getColor())», «toString(avoid.getDriveActions())»)
		«ELSEIF avoid.getObject() === Object.ROCK»
			RockAvoider(«toString(avoid.getDriveActions())»)
		«ENDIF»
	'''
	
	def static toString(List<DriveAction> driveActions) '''
		«FOR action : driveActions BEFORE "[" SEPARATOR "," AFTER "]"»
			«driveActionToString(action)»
		«ENDFOR»
	'''

	def static dispatch String driveActionToString(MoveBack action) {
		return "MoveAction(Speed.NORMAL, " + action.getMeters() + ")"
	}

	def static dispatch String driveActionToString(TurnLeft action) {
		return "RotateAction(Speed.NORMAL, " + action.getDegrees() + ")"
	}
	
	def static dispatch String driveActionToString(TurnRight action) {
		return "RotateAction(Speed.NORMAL, " + action.getDegrees() + ")"
	}

}
